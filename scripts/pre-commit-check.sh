#!/bin/bash

# üöÄ STMR VSCode Plugin - Pre-commit Check
# Este script executa todas as verifica√ß√µes antes de permitir um commit

set -e  # Parar execu√ß√£o se algum comando falhar

echo "üöÄ Iniciando verifica√ß√µes de pre-commit..."

# Fun√ß√£o para exibir mensagens coloridas
print_success() {
    echo -e "\033[32m‚úÖ $1\033[0m"
}

print_error() {
    echo -e "\033[31m‚ùå $1\033[0m"
}

print_warning() {
    echo -e "\033[33m‚ö†Ô∏è  $1\033[0m"
}

print_info() {
    echo -e "\033[34m‚ÑπÔ∏è  $1\033[0m"
}

# 1. Verificar se h√° arquivos staged
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|js|json|md)$' || true)

if [ -z "$STAGED_FILES" ]; then
    print_warning "Nenhum arquivo relevante foi staged para commit."
    exit 0
fi

print_info "Arquivos staged para verifica√ß√£o:"
echo "$STAGED_FILES"
echo ""

# 2. Compilar TypeScript
print_info "üî® Compilando TypeScript..."
if ! npm run compile; then
    print_error "Falha na compila√ß√£o TypeScript!"
    echo "‚ùå Corrija os erros de compila√ß√£o antes de fazer commit."
    exit 1
fi
print_success "TypeScript compilado com sucesso"

# 3. Executar ESLint
print_info "üßπ Executando ESLint..."
if ! npm run lint; then
    print_warning "ESLint encontrou problemas. Tentando corre√ß√£o autom√°tica..."
    
    # Tentar corre√ß√£o autom√°tica
    if npm run lint:fix; then
        print_info "Problemas corrigidos automaticamente. Verificando novamente..."
        
        # Verificar se ainda h√° problemas
        if npm run lint; then
            print_success "ESLint passou ap√≥s corre√ß√£o autom√°tica"
            
            # Adicionar arquivos corrigidos ao stage
            git add $STAGED_FILES
            print_info "Arquivos corrigidos foram adicionados ao stage"
        else
            print_error "ESLint ainda encontra problemas ap√≥s tentativa de corre√ß√£o!"
            echo ""
            echo "üîß A√ß√µes necess√°rias:"
            echo "1. Execute: npm run lint"
            echo "2. Corrija os problemas manualmente"
            echo "3. Execute: npm run lint:fix"
            echo "4. Tente fazer commit novamente"
            exit 1
        fi
    else
        print_error "Falha ao tentar corre√ß√£o autom√°tica do ESLint!"
        echo ""
        echo "üîß A√ß√µes necess√°rias:"
        echo "1. Execute: npm run lint"
        echo "2. Corrija os problemas manualmente"
        echo "3. Tente fazer commit novamente"
        exit 1
    fi
else
    print_success "ESLint passou sem problemas"
fi

# 4. Verificar formata√ß√£o com Prettier
print_info "üíÖ Verificando formata√ß√£o com Prettier..."
if ! npm run format:check; then
    print_warning "Formata√ß√£o inconsistente detectada. Corrigindo..."
    npm run format
    git add $STAGED_FILES
    print_success "Formata√ß√£o corrigida e arquivos atualizados"
else
    print_success "Formata√ß√£o est√° correta"
fi

# 5. Executar testes
print_info "üß™ Executando testes..."
if ! npm test; then
    print_error "Testes falharam!"
    echo ""
    echo "üîß A√ß√µes necess√°rias:"
    echo "1. Execute: npm test"
    echo "2. Verifique os erros nos testes"
    echo "3. Corrija os problemas"
    echo "4. Tente fazer commit novamente"
    exit 1
fi
print_success "Todos os testes passaram"

# 6. Verifica√ß√£o final
print_info "üîç Verifica√ß√£o final..."

# Verificar se n√£o h√° arquivos n√£o staged ap√≥s as corre√ß√µes
UNSTAGED_CHANGES=$(git diff --name-only | grep -E '\.(ts|js|json|md)$' || true)
if [ ! -z "$UNSTAGED_CHANGES" ]; then
    print_warning "H√° mudan√ßas n√£o staged ap√≥s as corre√ß√µes:"
    echo "$UNSTAGED_CHANGES"
    print_info "Adicionando mudan√ßas corrigidas ao stage..."
    git add $UNSTAGED_CHANGES
fi

# Sucesso
echo ""
print_success "üéâ Todas as verifica√ß√µes passaram!"
print_success "‚ú® Commit autorizado!"
echo ""
print_info "üìä Resumo das verifica√ß√µes:"
echo "  ‚úÖ Compila√ß√£o TypeScript"
echo "  ‚úÖ ESLint (com corre√ß√µes se necess√°rio)"
echo "  ‚úÖ Formata√ß√£o Prettier"
echo "  ‚úÖ Testes unit√°rios"
echo ""

exit 0 